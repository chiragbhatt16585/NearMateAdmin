#!/bin/bash

# Test script for Address Management Operations
# This tests: Add, Edit, Delete (soft), Set Default

BASE_URL="http://localhost:4000"
MOBILE="+911234567890"
USER_TYPE="end_user"

echo "üß™ Testing Address Management Operations"
echo "========================================"
echo "Base URL: $BASE_URL"
echo "Mobile: $MOBILE"
echo "User Type: $USER_TYPE"
echo ""

echo "1Ô∏è‚É£ Step 1: Login to get user ID and token"
echo "-------------------------------------------"
LOGIN_RESPONSE=$(curl -s -X POST "$BASE_URL/api/v1/auth/login-with-mobile" \
  -H "Content-Type: application/json" \
  -d "{\"mobile\":\"$MOBILE\",\"otp\":\"123456\",\"userType\":\"$USER_TYPE\"}")

if [[ $LOGIN_RESPONSE == *"accessToken"* ]]; then
    TOKEN=$(echo $LOGIN_RESPONSE | jq -r '.accessToken')
    USER_ID=$(echo $LOGIN_RESPONSE | jq -r '.user.id')
    echo "‚úÖ Login successful!"
    echo "User ID: $USER_ID"
    echo "Token: ${TOKEN:0:20}..."
else
    echo "‚ùå Login failed. Please check if user exists and OTP is correct."
    echo "Response: $LOGIN_RESPONSE"
    exit 1
fi

echo ""
echo "2Ô∏è‚É£ Step 2: Check current addresses"
echo "----------------------------------"
echo "Current addresses:"
curl -s -X GET "$BASE_URL/api/v1/end-users/$USER_ID/addresses" \
  -H "Authorization: Bearer $TOKEN" | jq '.'

echo ""
echo "3Ô∏è‚É£ Step 3: Add new home address"
echo "--------------------------------"
HOME_ADDRESS_RESPONSE=$(curl -s -X POST "$BASE_URL/api/v1/end-users/$USER_ID/addresses" \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "type": "home",
    "label": "Primary Home",
    "area": "Andheri West",
    "pincode": "400058",
    "city": "Mumbai",
    "state": "Maharashtra",
    "country": "India",
    "isDefault": true
  }')

echo "Home address response:"
echo $HOME_ADDRESS_RESPONSE | jq '.'

HOME_ADDRESS_ID=$(echo $HOME_ADDRESS_RESPONSE | jq -r '.address.id')
echo "Home Address ID: $HOME_ADDRESS_ID"

echo ""
echo "4Ô∏è‚É£ Step 4: Add work address"
echo "-----------------------------"
WORK_ADDRESS_RESPONSE=$(curl -s -X POST "$BASE_URL/api/v1/end-users/$USER_ID/addresses" \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "type": "work",
    "label": "Office",
    "area": "Bandra East",
    "pincode": "400050",
    "city": "Mumbai",
    "state": "Maharashtra",
    "country": "India",
    "isDefault": false
  }')

echo "Work address response:"
echo $WORK_ADDRESS_RESPONSE | jq '.'

WORK_ADDRESS_ID=$(echo $WORK_ADDRESS_RESPONSE | jq -r '.address.id')
echo "Work Address ID: $WORK_ADDRESS_ID"

echo ""
echo "5Ô∏è‚É£ Step 5: Check all addresses after adding"
echo "-------------------------------------------"
echo "All addresses:"
curl -s -X GET "$BASE_URL/api/v1/end-users/$USER_ID/addresses" \
  -H "Authorization: Bearer $TOKEN" | jq '.'

echo ""
echo "6Ô∏è‚É£ Step 6: Edit work address"
echo "------------------------------"
EDIT_RESPONSE=$(curl -s -X PATCH "$BASE_URL/api/v1/end-users/$USER_ID/addresses/$WORK_ADDRESS_ID" \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "label": "Updated Office",
    "area": "Bandra West",
    "pincode": "400051"
  }')

echo "Edit response:"
echo $EDIT_RESPONSE | jq '.'

echo ""
echo "7Ô∏è‚É£ Step 7: Set work address as default"
echo "---------------------------------------"
SET_DEFAULT_RESPONSE=$(curl -s -X PATCH "$BASE_URL/api/v1/end-users/$USER_ID/addresses/$WORK_ADDRESS_ID/set-default" \
  -H "Authorization: Bearer $TOKEN")

echo "Set default response:"
echo $SET_DEFAULT_RESPONSE | jq '.'

echo ""
echo "8Ô∏è‚É£ Step 8: Check addresses after setting default"
echo "------------------------------------------------"
echo "Addresses with new default:"
curl -s -X GET "$BASE_URL/api/v1/end-users/$USER_ID/addresses" \
  -H "Authorization: Bearer $TOKEN" | jq '.'

echo ""
echo "9Ô∏è‚É£ Step 9: Delete home address (soft delete)"
echo "----------------------------------------------"
DELETE_RESPONSE=$(curl -s -X DELETE "$BASE_URL/api/v1/end-users/$USER_ID/addresses/$HOME_ADDRESS_ID" \
  -H "Authorization: Bearer $TOKEN")

echo "Delete response:"
echo $DELETE_RESPONSE | jq '.'

echo ""
echo "üîü Step 10: Check addresses after deletion"
echo "------------------------------------------"
echo "Addresses after deletion (should only show active ones):"
curl -s -X GET "$BASE_URL/api/v1/end-users/$USER_ID/addresses" \
  -H "Authorization: Bearer $TOKEN" | jq '.'

echo ""
echo "‚ú® Address Management Test Complete!"
echo "===================================="
echo ""
echo "üìã Summary of Operations Tested:"
echo "‚úÖ Add new address (home)"
echo "‚úÖ Add new address (work)" 
echo "‚úÖ Edit existing address"
echo "‚úÖ Set address as default"
echo "‚úÖ Delete address (soft delete)"
echo "‚úÖ Verify address count changes"
echo ""
echo "üí° Key Features Verified:"
echo "‚Ä¢ Soft delete (isActive: false)"
echo "‚Ä¢ Default address management"
echo "‚Ä¢ Address ordering (default first)"
echo "‚Ä¢ CRUD operations working"
echo ""
echo "üöÄ Your address management system is fully functional!"
